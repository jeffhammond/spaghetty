#include <iostream>
#include <math.h>
#include "mpi.h"

using namespace std;
using namespace MPI;

double transpose_1234();
double transpose_1243();
double transpose_1324();
double transpose_1342();
double transpose_1423();
double transpose_1432();
double transpose_2134();
double transpose_2143();
double transpose_2314();
double transpose_2341();
double transpose_2413();
double transpose_2431();
double transpose_3124();
double transpose_3142();
double transpose_3214();
double transpose_3241();
double transpose_3412();
double transpose_3421();
double transpose_4123();
double transpose_4132();
double transpose_4213();
double transpose_4231();
double transpose_4312();
double transpose_4321();

int main(int argc, char** argv) {

        int status=-1;
        int i,j;
        int me, nprocs;
        double start_time, end_time, driver_time;
        const int maxproc = 24;
        
        /* All MPI programs begin with this. *
         * It ensures proper handling of command line arguments. */
        status = MPI_Init(&argc, &argv);

        /* Finding the identity of the local process. */
        status = MPI_Comm_rank(MPI::COMM_WORLD, &me);
        //cout << "process " << me << ": status = " << status << " after MPI_Comm_rank" << endl;

        /* How many processes are we using? */
        status = MPI_Comm_size(MPI::COMM_WORLD, &nprocs);
        //cout << "process " << me << ": status = " << status << " after MPI_Comm_size" << endl;
        if(me==0){ cout << "nprocs = " << nprocs << endl; }
        
        /* Timing the real work. */
        start_time = MPI_Wtime();

        /* This is where you put the serial executable. */
        if (me==0){driver_time=transpose_1234();}
        if (me==1){driver_time=transpose_1243();}
        if (me==2){driver_time=transpose_1324();}
        if (me==3){driver_time=transpose_1342();}
        if (me==4){driver_time=transpose_1423();}
        if (me==5){driver_time=transpose_1432();}
        if (me==6){driver_time=transpose_2134();}
        if (me==7){driver_time=transpose_2143();}
        if (me==8){driver_time=transpose_2314();}
        if (me==9){driver_time=transpose_2341();}
        if (me==10){driver_time=transpose_2413();}
        if (me==11){driver_time=transpose_2431();}
        if (me==12){driver_time=transpose_3124();}
        if (me==13){driver_time=transpose_3142();}
        if (me==14){driver_time=transpose_3214();}
        if (me==15){driver_time=transpose_3241();}
        if (me==16){driver_time=transpose_3412();}
        if (me==17){driver_time=transpose_3421();}
        if (me==18){driver_time=transpose_4123();}
        if (me==19){driver_time=transpose_4132();}
        if (me==20){driver_time=transpose_4213();}
        if (me==21){driver_time=transpose_4231();}
        if (me==22){driver_time=transpose_4312();}
        if (me==23){driver_time=transpose_4321();}

        /* Determining the elapsed time and printing it. */
        end_time = MPI_Wtime();
        if(me==0) cout << "Total elapsed time = " << (end_time-start_time) << " seconds" << endl;
        
        /* All MPI programs end with this. */
        status = MPI_Finalize();
        cout << "process " << me << ": status = " << status << " after MPI_Finalize" << endl;
        
        return(0);
        
}

